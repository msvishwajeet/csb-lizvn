{"version":3,"sources":["Board.jsx","App.js","index.js"],"names":["Board","useState","active","setActive","hit","setHit","diceVal","setDiceVal","reShuffle","setReShuffle","memoizedValue","useMemo","arr","Array","from","length","_","i","newArr","push","splice","getRandomNumber","to","min","Math","ceil","max","floor","random","snakeBitePoint","snakeHouse","Map","size","home","dest","set","successPoint","greenHouse","useEffect","setTimeout","get","id","style","padding","margin","type","onClick","Number","map","ind","ij","className","height","width","background","borderRadius","fontSize","e","preventDefault","diceValue","rollTheDice","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.bd1f83aa.chunk.js","sourcesContent":["// import \"./styles.css\";\n\nimport { useEffect, useMemo, useState } from \"react\";\n\nexport default function Board() {\n  const [active, setActive] = useState(1);\n  const [hit, setHit] = useState(0);\n  const [diceVal, setDiceVal] = useState(null);\n  const [reShuffle, setReShuffle] = useState(true);\n  const memoizedValue = useMemo(() => {\n    const arr = Array.from({ length: 100 }, (_, i) => i + 1);\n    const newArr = [];\n    while (arr.length) newArr.push(arr.splice(0, 10));\n    return newArr;\n  }, []);\n  const getRandomNumber = (from, to) => {\n    const min = Math.ceil(from);\n    const max = Math.floor(to);\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const snakeBitePoint = useMemo(() => {\n    const snakeHouse = new Map();\n    while (snakeHouse.size < 5) {\n      const home = getRandomNumber(12, 99);\n      const dest = getRandomNumber(2, home - 1);\n      snakeHouse.set(home, dest);\n    }\n    return snakeHouse;\n  }, [reShuffle]);\n\n  const successPoint = useMemo(() => {\n    const greenHouse = new Map();\n    while (greenHouse.size < 6) {\n      const home = getRandomNumber(2, 90);\n      const dest = getRandomNumber(home, 99);\n      greenHouse.set(home, dest);\n    }\n    return greenHouse;\n  }, [reShuffle]);\n\n  const rollTheDice = () => {\n    setHit(hit + 1);\n    const diceValue = getRandomNumber(1, 6);\n    setDiceVal(diceValue);\n    setTimeout(() => {\n      setDiceVal(null);\n    }, 400);\n    setActive(active + diceValue <= 100 ? active + diceValue : active);\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (successPoint.get(active)) setActive(successPoint.get(active));\n      if (snakeBitePoint.get(active)) setActive(snakeBitePoint.get(active));\n    }, 300);\n  }, [active, successPoint, snakeBitePoint]);\n  useEffect(() => {\n    setActive(1);\n    setHit(0);\n  }, [reShuffle]);\n  return (\n    <div id=\"background\">\n      <button\n        style={{ padding: \"10px\", margin: \"10px\" }}\n        type=\"button\"\n        onClick={() => setReShuffle(!reShuffle)}\n      >\n        Re-shuffle Snake and Ladder\n      </button>\n      {Number(active) === 100 && (\n        <h3>{`Congratulations, You are a genuine legend ! won in ${hit} hits`}</h3>\n      )}\n\n      <table>\n        {memoizedValue.map((i, ind) => (\n          <tr key={`tr-${ind}`}>\n            {i.map((ij) => (\n              <th\n                key={`th-${ij}`}\n                className={`${successPoint.get(ij) && \"success\"} ${\n                  snakeBitePoint.get(ij) && \"alert\"\n                } ${ij === Number(active) ? \"pulser\" : \"\"}`}\n              >\n                {ij}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </table>\n      {Number(active) === 100 ? (\n        <button\n          type=\"button\"\n          onClick={() => {\n            setActive(1);\n            setHit(0);\n          }}\n        >\n          Restart\n        </button>\n      ) : (\n        <button\n          style={{\n            padding: \"10px\",\n            margin: \"10px\",\n            height: \"100px\",\n            width: \"100px\",\n            background: \"rgb(188, 243, 105)\",\n            borderRadius: \"50%\",\n            fontSize: diceVal ? \"12vw\" : \"15px\"\n          }}\n          type=\"button\"\n          onClick={(e) => (diceVal ? e.preventDefault() : rollTheDice())}\n        >\n          {diceVal || \"Roll the dice\"}\n        </button>\n      )}\n    </div>\n  );\n}\n","import \"./styles.css\";\n\nimport Board from \"./Board\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Let's play Snake & Ladder Game</h1>\n      <section>\n        <div className=\"info-tips\">\n          <span className=\"alert\"></span>\n          <p>Snake Bite Point</p>\n        </div>\n        <div className=\"info-tips\">\n          <span className=\"success\"></span>\n          <p>Ladder Point</p>\n        </div>\n        <div className=\"info-tips\">\n          <span className=\"pulser\"></span>\n          <p>Active Point</p>\n        </div>\n      </section>\n      <Board />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}